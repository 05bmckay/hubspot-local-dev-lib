en:
  debug:
    archive:
      extractZip:
        init: "Extracting project source..."
        writeError: "An error occured writing temp project source."
        extractError: "An error occured extracting project source."
        success: "Completed project source extraction."
      copySourceToDest:
        init: "Copying project source..."
        sourceEmpty: "Project source is empty"
        success: "Completed copying project source."
        error: An error occured copying project source to {{ dest }}.
      cleanupTempDir:
        error: "Failed to clean up temp dir: {{ tmpDir }}"
    github:
      fetchJsonFromRepository:
        fetching: "Fetching {{ uri }}..."
        error: "An error occured fetching JSON file."
      fetchReleaseData:
        error: "Failed fetching release data for {{ tag }} project."
        notFound: "Project {{ tag }} not found."
      downloadGithubRepoZip:
        fetching: "Fetching {{ releaseType }} with name {{ repoName }}..."
        fetchingName: "Fetching {{ name }}..."
        completed: "Completed project fetch."
        error: "An error occured fetching the project source."
      cloneGithubRepo:
        success: "Your new {{ type }} has been created in {{ dest }}"
      downloadGithubRepoContents:
        downloading: "Downloading content piece: {{ contentPiecePath }} from {{ downloadUrl }} to {{ downloadPath }}"
    modules:
      createModule:
        creatingModule: "Creating module at {{ path }}"
        creatingPath: "Creating {{ path }}"
    standardErrors:
      error: "Error: {{ error }}"
      context: "Context: {{ context }}"
    config:
      cliConfiguration:
        load:
          configFromEnv: "Loaded config from environment variables for {{ accountId }}"
          configFromFile: "Loaded config from configuration file."
          empty: "The config file was empty. Initializing an empty config."
        validate:
          noConfig: "Valiation failed: No config was found."
          noConfigAccounts: "Valiation failed: config.accounts[] is not defined."
          emptyAccountConfig: "Valiation failed: config.accounts[] has an empty entry."
          noAccountId: "Valiation failed: config.accounts[] has an entry missing accountId."
          duplicateAccountIds: "Valiation failed: config.accounts[] has multiple entries with {{ accountId }}."
          duplicateAccountNames: "Valiation failed: config.accounts[] has multiple entries with {{ accountName }}."
          nameContainsSpaces: "Valiation failed: config.name {{ accountName }} cannot contain spaces."
        updateAccount:
          noConfigToUpdate: "No config to update."
          updating: "Updating account config for {{ accountId }}"
          addingConfigEntry: "Adding account config entry for {{ accountId }}"
        removeAccountFromConfig: "Deleting config for {{ accountId }}"
      configFile:
        errorReading: "Config file could not be read: {{ configPath }}"
        errorParsing: "Config file could not be parsed"
        writeSuccess: "Successfully wrote updated config data to {{ configPath }}"
        errorLoading: "A configuration file could not be found at {{ configPath }}."
      configUtils:
        unknownType: "Unknown auth type {{ type }}"
    environment:
      loadConfig:
        missingAccountId: "Unable to load config from environment variables: Missing accountId"
        missingEnv: "Unable to load config from environment variables: Missing env"
        unknownAuthType: "Unable to load config from environment variables: Unknown auth type"
    utils:
      handleFields:
        convertFieldsJs:
          creating: "Creating child process with pid {{ pid }}"
          terminating: "Child process with pid {{ pid }} has been terminated"
          error: "There was an error converting '{{ filePath }}'"
        createTmpDirSync:
          error: "An error occured writing temporary project source."
        cleanupTmpDirSync:
          error: "There was an error deleting the temporary project source"
        saveOutput:
          error: "There was an error saving the json output of {{ path }}"
  errors:
    errorTypes:
      fileSystem:
        readAction: "reading from"
        writeAction: "writing to"
        otherAction: "accessing"
        unknownFilepath: "a file or folder"
        baseMessage: "An error occurred while {{ fileAction }} {{ filepath }}."
        systemErrorMessage: "This is the result of a system error: {{ errorMessage }}"
      standard:
        system: "A system error has occurred: {{ errorMessage }}"
        generic: "A {{ name }} has occurred"
      cmsFields:
        syntax: 'There was an error converting JS file "{{ path }}"'
        notFunction: 'There was an error loading JS file "{{ path }}". Expected type "Function" but received type "{{ returned }}". Make sure that your default export is a function.'
        notReturnArray: 'There was an error loading JS file "{{ path }}". Expected type "Array" but received type "{{ returned }}" . Make sure that your function returns an array'
        invalidPath: 'The path "{{ path }}" is not a path to a file or folder'
    github:
      downloadGithubRepoContents: "Failed to fetch contents: {{ errorMessage }}"
    modules:
      throwInvalidPathInput: "Expected PathInput"
      writeModuleMeta: "The {{ path }} path already exists"
    utils:
      git:
        configIgnore: "Unable to determine if config file is properly ignored by git."
    config:
      cliConfiguration:
        noConfigLoaded: "No Config loaded."
        updateAccount: "An accountId is required to update the config"
        updateDefaultAccount: "A 'defaultAccount' with value of number or string is required to update the config."
        renameAccount: "Cannot find account with identifier {{ currentName }}"
        removeAccountFromConfig: "Unable to find account for {{ nameOrId }}."
        updateDefaultMode: "The mode {{ defaultMode }} is invalid. Valid values are {{ validModes }}."
        updateHttpTimeout: The value {{ timeout }} is invalid. The value must be a number greater than {{ minTimeout }}.
        updateAllowUsageTracking: Unable to update allowUsageTracking. The value {{ isEnabled }} is invalid. The value must be a boolean.
